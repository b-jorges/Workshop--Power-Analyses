Scale_to_ms,
Between_Participant_Variability_Baseline){
#make a vector with an ID for each simulated participant
ID = paste0("p0",1:nParticipants)
#make a dataframe from the given values to work with, with one row per trial per participant and condition
ReactionTimes = expand.grid(ID=ID,
ConditionOfInterest=ConditionOfInterest,
reps = 1:reps)
ReactionTimes = ReactionTimes %>%
group_by(ID) %>%
mutate(Mean_Difficulty_Baseline = Mean_Difficulty_Baseline,
#this determines the shape of the log normal distribution we use to model reaction times
#see: https://lindeloev.github.io/shiny-rt/
#see also (for plots): https://en.wikipedia.org/wiki/Log-normal_distribution
Mean_Effect = Mean_Effect,
#Increase in difficulty as a fraction of mean difficulty of baseline
Scale_to_ms = Scale_to_ms,
Between_Participant_Variability_Baseline = Between_Participant_Variability_Baseline,
#we will represent this as a normal distribution around the baseline difficulty
Var_per_Participant = rnorm(1, 0, Between_Participant_Variability_Baseline)) %>%
group_by(ID, ConditionOfInterest) %>%
mutate(Difficulty_Per_ID_and_Condition = case_when(
ConditionOfInterest == "Hard" ~ Mean_Difficulty_Baseline +
Var_per_Participant +
Mean_Difficulty_Baseline*Mean_Effect,
ConditionOfInterest == "Easy" ~ Mean_Difficulty_Baseline +
Mean_Difficulty_Baseline*Var_per_Participant),
ReactionTime = rlnorm(length(ID), Difficulty_Per_ID_and_Condition, 0.5)*Scale_to_ms)
ReactionTimes
}
DataFrame = Simulate_RT_Data(nParticipants = 20,
reps = 200,
ConditionOfInterest = c("Easy", "Hard"),
Mean_Difficulty_Baseline = 0.8,
Mean_Effect = 0.5,
Scale_to_ms = 100,
Between_Participant_Variability_Baseline = 0.075)
ReactionTimes = Simulate_RT_Data(nParticipants = 20,
reps = 200,
ConditionOfInterest = c("Easy", "Hard"),
Mean_Difficulty_Baseline = 0.8,
Mean_Effect = 0.5,
Scale_to_ms = 100,
Between_Participant_Variability_Baseline = 0.075)
ggplot(ReactionTimes %>% filter(ReactionTime < 1000), aes(ReactionTime, color = ConditionOfInterest)) +
geom_density() +
coord_cartesian(xlim = c(0, 1000))
Model = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = lognormal())
Model = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family=Gamma(link=invfn()),
control=glmerControl(optimizer="bobyqa"))
?invfn
Model = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
summary(Model)
ReactionTimes = Simulate_RT_Data(nParticipants = 20,
reps = 200,
ConditionOfInterest = c("Easy", "Hard"),
Mean_Difficulty_Baseline = 0.8,
Mean_Effect = 0.5,
Scale_to_ms = 100,
Between_Participant_Variability_Baseline = 0.075)
Model = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
summary(Model)
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"]),
iteration = i))
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
nIterations = 100
PowerfulDataframe = data.frame()
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"]
summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"]
nParticipants = 20
reps = 200
ConditionOfInterest = c("Easy", "Hard")
Mean_Difficulty_Baseline = 0.8
Range_Mean_Effects = c(0.1, 0.2, 0.3)
Scale_to_ms = 100
Between_Participant_Variability_Baseline = 0.075
nIterations = 100
PowerfulDataframe = data.frame()
ConditionOfInterest = c("Easy", "Hard")
Mean_Difficulty_Baseline = 0.8
Range_Mean_Effects = c(0.1, 0.2, 0.3)
Scale_to_ms = 100
Between_Participant_Variability_Baseline = 0.075
nIterations = 100
PowerfulDataframe = data.frame()
for (nParticipants in c(10,20,30)){
for (reps in c(5, 15, 25)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Iteration: ", i))
print(paste0("PSE_Interaction: ", round(PSE_Interaction,4)))
#use our function to
ReactionTimes = SimulatePsychometricData(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
print(paste0(nIterations, " iterations took ", round(Sys.time() - TimeStartTrial), " seconds."))
print(paste0("The power for the current run through (",nParticipants," Participants, ", reps, " Repetitions) is ",mean(PowerfulDataframe$pvalue[PowerfulDataframe$nParticipants == nParticipants] < 0.05)))
save(PowerfulDataframe, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe.RData"))
}
}
}
for (nParticipants in c(10,20,30)){
for (reps in c(5, 15, 25)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Iteration: ", i))
print(paste0("PSE_Interaction: ", round(PSE_Interaction,4)))
#use our function to
ReactionTimes = SimulatePsychometricData(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe.RData"))
}
}
}
for (nParticipants in c(10,20,30)){
for (reps in c(5, 15, 25)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Iteration: ", i))
print(paste0("Mean_Effect: ", Mean_Effect))
#use our function to
ReactionTimes = SimulatePsychometricData(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe.RData"))
}
}
}
for (nParticipants in c(10,20,30)){
for (reps in c(5, 15, 25)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Iteration: ", i))
print(paste0("Mean_Effect: ", Mean_Effect))
#use our function to
ReactionTimes = Simulate_RT_Data(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Effect_Size,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe.RData"))
}
}
}
for (nParticipants in c(10,20,30)){
for (reps in c(5, 15, 25)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Iteration: ", i))
print(paste0("Mean_Effect: ", Mean_Effect))
#use our function to
ReactionTimes = Simulate_RT_Data(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe = rbind(PowerfulDataframe,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Mean_Effect,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe.RData"))
}
}
}
PowerfulDataframe = PowerfulDataframe_RT
PowerfulDataframe_RT = PowerfulDataframe
save(PowerfulDataframe_RT, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe_RT.RData"))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/PowerfulDataframe_RT.RData"))
alpha = 0.05
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha))
PowerfulDataframe_RT %>% group_by(nParticipants,WhichValue,PSE_Interaction,rep) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
PowerfulDataframe_RT %>% group_by(nParticipants,rep) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
Range_Mean_Effects
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/PowerfulDataframe_RT.RData"))
PowerfulDataframe_RT
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha))
PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(PSE_Interaction))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
labels = c("100% of Pilot", "50% of Pilot", "15% of Pilot"),
name = "Strength of Effect")
PowerfulDataframe_RT
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha)) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/PowerfulDataframe_RT.RData"))
alpha = 0.05
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha)) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(PSE_Interaction))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
labels = c("100% of Pilot", "50% of Pilot", "15% of Pilot"),
name = "Strength of Effect")
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
labels = c("100% of Pilot", "50% of Pilot", "15% of Pilot"),
name = "Strength of Effect")
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
labels = c(),
name = "Strength of Effect\n(as % of Baseline)")
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
#                     labels = c(),
name = "Strength of Effect\n(as % of Baseline)")
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
#                     labels = c(),
name = "Strength of Effect")
for (nParticipants in c(10,15,20)){
for (reps in c(10, 20, 30)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Number of reps: ", reps))
print(paste0("Iteration: ", i))
print(paste0("Mean_Effect: ", Mean_Effect))
#use our function to
ReactionTimes = Simulate_RT_Data(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe_RT = rbind(PowerfulDataframe_RT,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Mean_Effect,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe_RT, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe_RT.RData"))
}
}
}
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/PowerfulDataframe_RT.RData"))
alpha = 0.05
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha)) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
#                     labels = c(),
name = "Strength of Effect")
PowerfulDataframe_RT = data.frame()
for (nParticipants in c(10,15,20)){
for (reps in c(10, 20, 30)){
for (Mean_Effect in Range_Mean_Effects){
TimeStartTrial = Sys.time() #get time at beginning of trial
for(i in 1:nIterations){
print(paste0("Number of Participants: ", nParticipants))
print(paste0("Number of reps: ", reps))
print(paste0("Iteration: ", i))
print(paste0("Mean_Effect: ", Mean_Effect))
#use our function to
ReactionTimes = Simulate_RT_Data(nParticipants,
reps,
ConditionOfInterest,
Mean_Difficulty_Baseline,
Mean_Effect = Mean_Effect,
Scale_to_ms,
Between_Participant_Variability_Baseline)
GLMM = glmer(ReactionTime ~ ConditionOfInterest + (ConditionOfInterest | ID),
data = ReactionTimes,
family = gaussian(link = "log"),
control=glmerControl(optimizer="bobyqa"))
#save everything into
PowerfulDataframe_RT = rbind(PowerfulDataframe_RT,data.frame(nParticipants = nParticipants,
rep = reps,
Effect_Size = Mean_Effect,
pvalue = summary(GLMM)$coefficients["ConditionOfInterestHard","Pr(>|z|)"],
estimate = summary(GLMM)$coefficients["ConditionOfInterestHard","Estimate"],
iteration = i))
}
save(PowerfulDataframe_RT, file = paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/SavedVariables/PowerfulDataframe_RT.RData"))
}
}
}
load(file=paste0(dirname(rstudioapi::getSourceEditorContext()$path),"/SavedVariables/PowerfulDataframe_RT.RData"))
alpha = 0.05
PowerfulDataframe_RT = PowerfulDataframe_RT %>% group_by(nParticipants,rep, Effect_Size) %>%
mutate(Power = mean(pvalue < alpha)) %>%
slice(1) %>%
mutate(n_trials = paste0(rep, " Trials"),
Effect = paste0(paste0(Effect_Size*100,"% of Baseline")))
ggplot(PowerfulDataframe_RT,
aes(nParticipants,Power, color = as.factor(Effect))) +
geom_line(linewidth = 1) +
geom_point() +
xlab("Number of Participants") +
ylab("Power") +
geom_hline(yintercept = 0.8, linetype=1) +
geom_hline(yintercept = 0.9, linetype=2) +
geom_hline(yintercept = 0.95, linetype=3) +
ylim(c(0,1)) +
facet_wrap(.~n_trials) +
scale_color_manual(values = c("orange","purple","red"),
#                     labels = c(),
name = "Strength of Effect")
